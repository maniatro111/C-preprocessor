NUME: Florin Postolache
GRUPA: 335CC


Organizare:
    The logic is sequential. 
    Analyzing steps:

        1. Firstly, read and interpret all the arguments given to the 
        executable:
            a. If the -D option is present, add that macro in the hashmap
            b. If the -I option is present, add that path to the directory
               into a string array.
            c. If the -o option is present, check that we don't already 
               have a path to an output file. If we don't already have one,
               save the path for later usage.
            d. If I have a path to an input file, check that we don't already 
               have a path to an input file. Extract the relative path
               to the input file and save the whole path for later usage.
            e. If I have a path to an output file, check that we don't already 
               have a path to an output file. If we don't already have one,
               save the path for later usage.
            f. If any other option is present, return 1 for security reasons.

        2. After all arguments are parsed, try to open the input file and 
        output file. Return 1 if any file failed to open.

        3. Next step is analyzing the input file. I read the file line by line
        and interpret it as it should be. Two things here that I need to tell.
        I have an int that I kinda use as a boolean. If I have an if expression,
        I analyze the expression and make the variable 0 or 1. If it is on 0, I 
        can't interpret the line that I read. If it is 1, I can. The else command,
        changes that value to the other. Another thing is, when I meet an include
        directive, I stop reading the current file, I try to search for that file that
        has to be included and start interpreting that new file.

        4. After we finish analyzing the input file, try closing the input and 
        output file. Return 1 if a close fails.

        5. Free all the resources the we allocated for the executable.

    Data structures used:
        1. Map entry:
            typedef struct entry {
	        char *key;
	        char *value;
            } entry;
        This is an entry in the map. It stores the key and value as a char* in 
        the key and value field.

        2. Map:
            typedef struct map {
	        entry *entries;
	        unsigned long capacity;
	        unsigned long length;
            } map;
        This is the map data structure. It has an array of entries, which 
        stores all entries of the hasmap. The capacity field is used to 
        know the maximum number of entries that the map can hold. I use it to
        know when I have to expand the size of the entries array. The length 
        field is used to know how many entries I have in the map. When the 
        length aproaches the capacity, that means that I have to resize the map.

    Considerations:
        In my opinion, the homework was interesting, but very poorly explained.
    Many thing I've found out when I started reading the checker.
        I consider that my implementation is pretty good, but as always, it 
    can be better, given more time. :)

Implementation:

    The whole homework was solved. I don't really know if I have some extra 
    functionalities implemented. I implemented as I thought was ok.
    Some difficulties encountered were the checker understanding.
    Some interesting things that I've found out is that a vector iteration 
    character by character is always better than strstr. :)

How the homework compiles and runs?
    
    The homework compiles and runs as it was desired from the homework text.
    It compiles with the make command.
    It runs as the homework text says. 
    ./so-cpp or ./so-cpp.exe and the arguments needed

Bibliography
    https://ocw.cs.pub.ro/courses/so/laboratoare/laborator-01
    https://stackoverflow.com/questions/7666509/hash-function-for-string
    https://stackoverflow.com/questions/1025589/setting-variable-to-null-after-free

Git

    https://github.com/maniatro111/SO
    If it is needed, I will make it public and give access to it.
